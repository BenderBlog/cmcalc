// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class CalendarSystemFromDart(val raw: Int) {
  GREGORIAN(0),
  MILANKOVIC(1),
  JULIAN(2),
  ISLAMIC(3),
  HEBREW(4),
  EGYPTIAN(5),
  PERSIAN(6),
  COPTIC(7),
  ETHIOPIAN(8),
  INDIAN(9),
  CHINESE(10);

  companion object {
    fun ofRaw(raw: Int): CalendarSystemFromDart? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class CalendarExecuteState (
  val isSuccess: Boolean,
  val message: String? = null,
  val data: Map<CalendarSystemFromDart, List<Any?>>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): CalendarExecuteState {
      val isSuccess = pigeonVar_list[0] as Boolean
      val message = pigeonVar_list[1] as String?
      val data = pigeonVar_list[2] as Map<CalendarSystemFromDart, List<Any?>>
      return CalendarExecuteState(isSuccess, message, data)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      isSuccess,
      message,
      data,
    )
  }
}
private open class CalendarBridgePigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          CalendarSystemFromDart.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          CalendarExecuteState.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is CalendarSystemFromDart -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is CalendarExecuteState -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface CalendarWrapper {
  fun setCalendar(yearStem: Long?, year: Long, month: Long, day: Long, calendarSystem: CalendarSystemFromDart, callback: (Result<CalendarExecuteState>) -> Unit)

  companion object {
    /** The codec used by CalendarWrapper. */
    val codec: MessageCodec<Any?> by lazy {
      CalendarBridgePigeonCodec()
    }
    /** Sets up an instance of `CalendarWrapper` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: CalendarWrapper?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.cmcalc.CalendarWrapper.setCalendar$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val yearStemArg = args[0] as Long?
            val yearArg = args[1] as Long
            val monthArg = args[2] as Long
            val dayArg = args[3] as Long
            val calendarSystemArg = args[4] as CalendarSystemFromDart
            api.setCalendar(yearStemArg, yearArg, monthArg, dayArg, calendarSystemArg) { result: Result<CalendarExecuteState> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
