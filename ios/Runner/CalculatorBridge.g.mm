// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "CalculatorBridge.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation ResultTypeBox
- (instancetype)initWithValue:(ResultType)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
@end

@interface CalcResult ()
+ (CalcResult *)fromList:(NSArray<id> *)list;
+ (nullable CalcResult *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation CalcResult
+ (instancetype)makeWithResultType:(ResultType)resultType
    message:(NSString *)message
    parsed:(NSString *)parsed
    result:(NSString *)result {
  CalcResult* pigeonResult = [[CalcResult alloc] init];
  pigeonResult.resultType = resultType;
  pigeonResult.message = message;
  pigeonResult.parsed = parsed;
  pigeonResult.result = result;
  return pigeonResult;
}
+ (CalcResult *)fromList:(NSArray<id> *)list {
  CalcResult *pigeonResult = [[CalcResult alloc] init];
  ResultTypeBox *boxedResultType = GetNullableObjectAtIndex(list, 0);
  pigeonResult.resultType = boxedResultType.value;
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  pigeonResult.parsed = GetNullableObjectAtIndex(list, 2);
  pigeonResult.result = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable CalcResult *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [CalcResult fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    [[ResultTypeBox alloc] initWithValue:self.resultType],
    self.message ?: [NSNull null],
    self.parsed ?: [NSNull null],
    self.result ?: [NSNull null],
  ];
}
@end

@interface nullCalculatorBridgePigeonCodecReader : FlutterStandardReader
@end
@implementation nullCalculatorBridgePigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 129: {
      NSNumber *enumAsNumber = [self readValue];
      // Edited by BenderBlog Rodriguez!
        if (enumAsNumber == nil) {
            return nil;
        } else {
            switch([enumAsNumber integerValue]) {
                case 0: return [[ResultTypeBox alloc] initWithValue:ResultTypeSuccess];
                case 1: return [[ResultTypeBox alloc] initWithValue:ResultTypeWarning];
                case 2: return [[ResultTypeBox alloc] initWithValue:ResultTypeFailure];
                default: return nil;
            }
        }
    }
    case 130: 
      return [CalcResult fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface nullCalculatorBridgePigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullCalculatorBridgePigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[ResultTypeBox class]]) {
    ResultTypeBox *box = (ResultTypeBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null] : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[CalcResult class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullCalculatorBridgePigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation nullCalculatorBridgePigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullCalculatorBridgePigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullCalculatorBridgePigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetCalculatorBridgeCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullCalculatorBridgePigeonCodecReaderWriter *readerWriter = [[nullCalculatorBridgePigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpCalculatorWrapper(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CalculatorWrapper> *api) {
  SetUpCalculatorWrapperWithSuffix(binaryMessenger, api, @"");
}

void SetUpCalculatorWrapperWithSuffix(id<FlutterBinaryMessenger> binaryMessenger, NSObject<CalculatorWrapper> *api, NSString *messageChannelSuffix) {
  messageChannelSuffix = messageChannelSuffix.length > 0 ? [NSString stringWithFormat: @".%@", messageChannelSuffix] : @"";
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.cmcalc.CalculatorWrapper.calculate", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCalculatorBridgeCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(calculateCommand:completion:)], @"CalculatorWrapper api (%@) doesn't respond to @selector(calculateCommand:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_command = GetNullableObjectAtIndex(args, 0);
        [api calculateCommand:arg_command completion:^(CalcResult *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:[NSString stringWithFormat:@"%@%@", @"dev.flutter.pigeon.cmcalc.CalculatorWrapper.parseCommand", messageChannelSuffix]
        binaryMessenger:binaryMessenger
        codec:nullGetCalculatorBridgeCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(parseCommandCommand:completion:)], @"CalculatorWrapper api (%@) doesn't respond to @selector(parseCommandCommand:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray<id> *args = message;
        NSString *arg_command = GetNullableObjectAtIndex(args, 0);
        [api parseCommandCommand:arg_command completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
