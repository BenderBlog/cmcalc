// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "CalendarBridge.g.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray<id> *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null],
      error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}

static id GetNullableObjectAtIndex(NSArray<id> *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@implementation CalendarSystemFromDartBox
- (instancetype)initWithValue:(CalendarSystemFromDart)value {
  self = [super init];
  if (self) {
    _value = value;
  }
  return self;
}
- (nonnull id)copyWithZone:(nullable NSZone *)zone {
  return self;
}

@end

@interface CalendarExecuteState ()
+ (CalendarExecuteState *)fromList:(NSArray<id> *)list;
+ (nullable CalendarExecuteState *)nullableFromList:(NSArray<id> *)list;
- (NSArray<id> *)toList;
@end

@implementation CalendarExecuteState
+ (instancetype)makeWithIsSuccess:(BOOL)isSuccess
                          message:(nullable NSString *)message
                             data:(NSDictionary<CalendarSystemFromDartBox *,
                                                NSArray<id> *> *)data {
  CalendarExecuteState *pigeonResult = [[CalendarExecuteState alloc] init];
  pigeonResult.isSuccess = isSuccess;
  pigeonResult.message = message;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (CalendarExecuteState *)fromList:(NSArray<id> *)list {
  CalendarExecuteState *pigeonResult = [[CalendarExecuteState alloc] init];
  pigeonResult.isSuccess = [GetNullableObjectAtIndex(list, 0) boolValue];
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  pigeonResult.data = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable CalendarExecuteState *)nullableFromList:(NSArray<id> *)list {
  return (list) ? [CalendarExecuteState fromList:list] : nil;
}
- (NSArray<id> *)toList {
  return @[
    @(self.isSuccess),
    self.message ?: [NSNull null],
    self.data ?: [NSNull null],
  ];
}
@end

@interface nullCalendarBridgePigeonCodecReader : FlutterStandardReader
@end
@implementation nullCalendarBridgePigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
  case 129: {
    NSNumber *enumAsNumber = [self readValue];
    // Edited by BenderBlog Rodriguez!
    if (enumAsNumber == nil) {
      return nil;
    } else {
      switch ([enumAsNumber integerValue]) {
      case 0:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartGregorian];
      case 1:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartMilankovic];
      case 2:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartJulian];
      case 3:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartIslamic];
      case 4:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartHebrew];
      case 5:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartEgyptian];
      case 6:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartPersian];
      case 7:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartCoptic];
      case 8:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartEthiopian];
      case 9:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartIndian];
      case 10:
        return [[CalendarSystemFromDartBox alloc]
            initWithValue:CalendarSystemFromDartChinese];
      default:
        return nil;
      }
    }
  }
  case 130:
    return [CalendarExecuteState fromList:[self readValue]];
  default:
    return [super readValueOfType:type];
  }
}
@end

@interface nullCalendarBridgePigeonCodecWriter : FlutterStandardWriter
@end
@implementation nullCalendarBridgePigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[CalendarSystemFromDartBox class]]) {
    CalendarSystemFromDartBox *box = (CalendarSystemFromDartBox *)value;
    [self writeByte:129];
    [self writeValue:(value == nil ? [NSNull null]
                                   : [NSNumber numberWithInteger:box.value])];
  } else if ([value isKindOfClass:[CalendarExecuteState class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface nullCalendarBridgePigeonCodecReaderWriter
    : FlutterStandardReaderWriter
@end
@implementation nullCalendarBridgePigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[nullCalendarBridgePigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[nullCalendarBridgePigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *nullGetCalendarBridgeCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    nullCalendarBridgePigeonCodecReaderWriter *readerWriter =
        [[nullCalendarBridgePigeonCodecReaderWriter alloc] init];
    sSharedObject =
        [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}
void SetUpCalendarWrapper(id<FlutterBinaryMessenger> binaryMessenger,
                          NSObject<CalendarWrapper> *api) {
  SetUpCalendarWrapperWithSuffix(binaryMessenger, api, @"");
}

void SetUpCalendarWrapperWithSuffix(id<FlutterBinaryMessenger> binaryMessenger,
                                    NSObject<CalendarWrapper> *api,
                                    NSString *messageChannelSuffix) {
  messageChannelSuffix =
      messageChannelSuffix.length > 0
          ? [NSString stringWithFormat:@".%@", messageChannelSuffix]
          : @"";
  {
    FlutterBasicMessageChannel *channel = [[FlutterBasicMessageChannel alloc]
           initWithName:[NSString
                            stringWithFormat:@"%@%@",
                                             @"dev.flutter.pigeon.cmcalc."
                                             @"CalendarWrapper.setCalendar",
                                             messageChannelSuffix]
        binaryMessenger:binaryMessenger
                  codec:nullGetCalendarBridgeCodec()];
    if (api) {
      NSCAssert(
          [api respondsToSelector:@selector
               (setCalendarYearStem:year:month:day:calendarSystem:completion:)],
          @"CalendarWrapper api (%@) doesn't respond to "
          @"@selector(setCalendarYearStem:year:month:day:calendarSystem:"
          @"completion:)",
          api);
      [channel setMessageHandler:^(id _Nullable message,
                                   FlutterReply callback) {
        NSArray<id> *args = message;
        NSNumber *arg_yearStem = GetNullableObjectAtIndex(args, 0);
        NSInteger arg_year = [GetNullableObjectAtIndex(args, 1) integerValue];
        NSInteger arg_month = [GetNullableObjectAtIndex(args, 2) integerValue];
        NSInteger arg_day = [GetNullableObjectAtIndex(args, 3) integerValue];
        CalendarSystemFromDartBox *boxedCalendarSystemFromDart =
            GetNullableObjectAtIndex(args, 4);
        CalendarSystemFromDart arg_calendarSystem =
            boxedCalendarSystemFromDart.value;
        [api setCalendarYearStem:arg_yearStem
                            year:arg_year
                           month:arg_month
                             day:arg_day
                  calendarSystem:arg_calendarSystem
                      completion:^(CalendarExecuteState *_Nullable output,
                                   FlutterError *_Nullable error) {
                        callback(wrapResult(output, error));
                      }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
